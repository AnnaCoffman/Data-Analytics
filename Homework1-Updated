#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Feb 28 18:38:22 2022

@author: annacoffman
"""
import pandas as pd
import numpy as np 

import statsmodels.formula.api as sm # module for stats models
from statsmodels.iolib.summary2 import summary_col # module for presenting stats models outputs nicely

#%%
def price2ret(prices,retType='simple'):
    if retType == 'simple':
        ret = (prices/prices.shift(1))-1
    else:
        ret = np.log(prices/prices.shift(1))
    return ret
#%%
from pathlib import Path
import sys
import os

home=str(Path.home())
print(home)

# %%
if sys.platform == 'linux':
    inputDir = '/Grad Semester 2/Data_Analytics' 
elif sys.platform == 'win32':
    inputDir = '\\datasets\stocks\\' 
else :
    inputDir = '/Documents/Grad Semester 2/Data_Analytics/'
   
    
fullDir = home+inputDir
print(fullDir)

# %%
stkName = 'AMZN'
fileName = 'stk_' + stkName + '.csv'
readfile = fullDir + fileName 

df_stk = pd.read_csv(readfile,index_col='Date',parse_dates=True)
df_stk.head()

df_stk['AMZN_Returns'] = price2ret(df_stk[['Close']])
df_stk = df_stk.dropna()
df_stk.head()

df_AMZN = df_stk

# %%
stkName = 'TJX'
fileName = 'stk_' + stkName + '.csv'
readfile = fullDir + fileName 

df_stk = pd.read_csv(readfile,index_col='Date',parse_dates=True)
df_stk.head()

df_stk['TJX_Returns'] = price2ret(df_stk[['Close']])
df_stk = df_stk.dropna()
df_stk.head()

df_TJX = df_stk

# %%
stkName = 'WMT'
fileName = 'stk_' + stkName + '.csv'
readfile = fullDir + fileName 

df_stk = pd.read_csv(readfile,index_col='Date',parse_dates=True)
df_stk.head()

df_stk['WMT_Returns'] = price2ret(df_stk[['Close']])
df_stk = df_stk.dropna()
df_stk.head()

df_WMT = df_stk

#%%
stkName = 'AMZN'
fileName = 'stk_' + stkName + '_Y.csv'
readfile = fullDir + fileName 

    
df_stk = pd.read_csv(readfile,index_col='Date',parse_dates=True)
df_stk.head()


df_stk['AMZN_Returns'] = price2ret(df_stk[['Yahoo_Close']])
df_stk = df_stk.dropna()
df_stk.head()

df_AMZN_Y = df_stk


#%%
stkName = 'TJX'
fileName = 'stk_' + stkName + '_Y.csv'
readfile = fullDir + fileName 

df_stk = pd.read_csv(readfile,index_col='Date',parse_dates=True)
df_stk.head()

df_stk['TJX_Returns'] = price2ret(df_stk[['Yahoo_Close']])
df_stk = df_stk.dropna()
df_stk.head()

df_TJX_Y = df_stk

#%%
stkName = 'WMT'
fileName = 'stk_' + stkName + '_Y.csv'
readfile = fullDir + fileName 

df_stk = pd.read_csv(readfile,index_col='Date',parse_dates=True)
df_stk.head()

df_stk['WMT_Returns'] = price2ret(df_stk[['Yahoo_Close']])
df_stk = df_stk.dropna()
df_stk.head()

df_WMT_Y = df_stk

# %%
AMZN_merge= pd.merge(df_AMZN, df_AMZN_Y, left_index=True, right_index=True)    

WMT_merge= pd.merge(df_WMT, df_WMT_Y, left_index=True, right_index=True)

TJX_merge= pd.merge(df_TJX, df_TJX_Y, left_index=True, right_index=True)
# %%
import matplotlib.pyplot as plt 

plt.figure()
plt.plot(AMZN_merge['Yahoo_Close'], color='pink',)
plt.plot(AMZN_merge['Close'], color='purple',)
plt.xlabel('Date')
plt.ylabel('Close')
plt.title('Amazon')
 

plt.figure()
plt.plot(WMT_merge['Yahoo_Close'], color='pink',)
plt.plot(WMT_merge['Close'], color='purple',)
plt.xlabel('Date')
plt.ylabel('Close')
plt.title('Walmart')

plt.figure()
plt.plot(TJX_merge['Yahoo_Close'], color='pink',)
plt.plot(TJX_merge['Close'], color='purple',)
plt.xlabel('Date')
plt.ylabel('Close')
plt.title('TJ Maxx')


# %%
Amazon_comparison = AMZN_merge["Close"].compare(AMZN_merge["Yahoo_Close"], align_axis=1, keep_shape=False)

AMZN_merge["Close"]==AMZN_merge['Yahoo_Close']

Walmart_comparison = WMT_merge["Close"].compare(WMT_merge["Yahoo_Close"], align_axis=1, keep_shape=False)

WMT_merge["Close"]==WMT_merge['Yahoo_Close']

TJ_MAXX_comparison = TJX_merge["Close"].compare(TJX_merge["Yahoo_Close"], align_axis=1, keep_shape=False)

TJX_merge["Close"]==TJX_merge['Yahoo_Close']

##The comparison function rounds the Yahoo close price so it shows that the values are all equal 
##When comparing if they are equal below that it prints out with "true" or "False" if they are equal or not when not rounded




